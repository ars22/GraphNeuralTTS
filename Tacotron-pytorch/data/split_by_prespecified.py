import os
import argparse
import random
import json

def split_and_save(args):
    meta_all_path = args.meta_all
    with open(args.splits_file, "r") as f:
        splits = json.load(f)
        for split, split_files in splits.items():
            tmp = []
            #TODO:  the splits currently use wav names in them (like arctic_rxr_c0021.wav), they should ideally
            #  just have the filename
            for split_file in split_files:
                # arctic_rxr_c0021.wav -> arctic_rxr_c0021
                tmp.append(split_file.split(".")[0])
            splits[split] = tmp
    
    meta_dir = os.path.dirname(os.path.realpath(meta_all_path))
    meta_file_name = os.path.realpath(meta_all_path).split("/")[-1].split(".")[0]
    meta_tr_path = os.path.join(meta_dir, f'{meta_file_name}_train.txt')
    meta_te_path = os.path.join(meta_dir, f'{meta_file_name}_test.txt')
    meta_val_path = os.path.join(meta_dir, f'{meta_file_name}_val.txt')
    
    with open(meta_all_path) as f:
        meta_all = f.readlines()
        meta_tr = []
        meta_te = []
        meta_vl = []

    for idx, line in enumerate(meta_all):
        # arctic_axb_a0489-mel.npy -> arctic_axb_a0489
        line_id = "-".join(line.split("|")[0].split("-")[:-1])
        if line_id in splits["train"]:
            meta_tr.append(line)

        elif line_id in splits["test"]:
            meta_te.append(line)


        elif line_id in splits["val"]:
            meta_vl.append(line)
        else:
            print(line_id, splits['train'][0])
            raise Exception(f"Unknown split present in the splits file")

    with open(meta_tr_path, 'w') as ftr:
        ftr.write(''.join(meta_tr))

    with open(meta_te_path, 'w') as fte:
        fte.write(''.join(meta_te))

    with open(meta_val_path, 'w') as ftv:
        ftv.write(''.join(meta_vl))
    
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Split the data')
    parser.add_argument('--meta-all',  type=str, help='The meta file generated by preprocess.py', required=True)
    parser.add_argument('--splits-file', type=str, help='The json file that has split information', required=True)
    args = parser.parse_args()
    split_and_save(args)
